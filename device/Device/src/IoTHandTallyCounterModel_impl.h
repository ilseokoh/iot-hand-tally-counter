/************************************************************************************************
 * This code was automatically generated by Digital Twin Code Generator tool 0.6.8.
 * Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
 *
 * Generated Date: 2020-02-21
 ***********************************************************************************************/

#ifndef IOTHANDTALLYCOUNTERMODEL_IMPL
#define IOTHANDTALLYCOUNTERMODEL_IMPL

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#include "azure_c_shared_utility/xlogging.h"
#include "azure_c_shared_utility/threadapi.h"
#include "parson.h"

/**
* Type definition
*/

/**
* @brief Result of DigitalTwin command execution.
*/
typedef enum DIGITALTWIN_COMMAND_RESULT_TAG
{
    DIGITALTWIN_COMMAND_OK,
    DIGITALTWIN_COMMAND_TIMEOUT,
    DIGITALTWIN_COMMAND_ERROR
} DIGITALTWIN_COMMAND_RESULT;

typedef struct COUNTER_HITCOUNT_TAG
{
    int hit;

    char* hitTime;

} COUNTER_HITCOUNT;

typedef struct COUNTER_RESETCOUNT_ResetResponse_TAG
{
    char* LastCountTime;

    int LastCount;

} COUNTER_RESETCOUNT_ResetResponse;

/**
* Device telemetries related methods.
*/

void Counter_Telemetry_ReadHitCount(COUNTER_HITCOUNT * hitCount);

/**
* Device properties related methods.
*/

char* Counter_Property_GetType();

char* Counter_Property_GetResetTime();

int Counter_Property_GetTotalCount();

bool Counter_Property_IntervalCallback(int interval);

char* Deviceinfo_Property_GetManufacturer();

char* Deviceinfo_Property_GetModel();

char* Deviceinfo_Property_GetSwVersion();

char* Deviceinfo_Property_GetOsName();

char* Deviceinfo_Property_GetProcessorArchitecture();

char* Deviceinfo_Property_GetProcessorManufacturer();

long Deviceinfo_Property_GetTotalStorage();

long Deviceinfo_Property_GetTotalMemory();

/**
* Device commands related methods.
*/

DIGITALTWIN_COMMAND_RESULT Counter_Command_ResetCount(COUNTER_RESETCOUNT_ResetResponse* response, unsigned int* statusCode);

// Callbacks to handle the confirmation result of sending telemetry
void SendTelemetry_Succeeded_Callback(const char* interfaceName);
void SendTelemetry_Error_Callback(const char* interfaceName);

// Callbacks to handle the confirmation result of reporting property
void ReportProperty_Succeeded_Callback(const char* interfaceName, const char* propertyName);
void ReportProperty_Error_Callback(const char* interfaceName, const char* propertyName);

#ifdef __cplusplus
}
#endif

#endif // IOTHANDTALLYCOUNTERMODEL_IMPL
